{"mappings":"AAAA,MAAM,YAAY,SAAS,cAAc,gBACzC,aAAa,UAAU,cAAc,QACrC,YAAY,UAAU,cAAc,UACpC,aAAa,SAAS,cAAc,iBACpC,cAAc,SAAS,cAAc,kBACrC,aAAa,SAAS,cAAc,iBACpC,eAAe,SAAS,cAAc,mBACtC,cAAc,SAAS,cAAc;AAErC,IAAI;AAEJ,MAAM,WAAW,CAAC;IACd,MAAM,OAAO,EAAE,OAAO,KAAK,CAAC,EAAE,EAAE,mCAAmC;IACnE,IAAG,CAAC,MAAM,QAAQ,0CAA0C;IAC5D,WAAW,MAAM,IAAI,gBAAgB,OAAO,+CAA+C;IAC3F,WAAW,iBAAiB,QAAQ;QAChC,WAAW,QAAQ,WAAW;QAC9B,YAAY,QAAQ,WAAW;QAC/B,eAAe,WAAW,eAAe,WAAW;QACpD,SAAS,cAAc,YAAY,UAAU,IAAI;IACrD;AACJ;AAEA,WAAW,iBAAiB,SAAS;IACjC,wDAAwD;IACxD,MAAM,SAAS,WAAW,UAAU,WAAW,QAAQ,eAAe,YAAY;IAClF,YAAY,QAAQ,KAAK,MAAM;AACnC;AAEA,YAAY,iBAAiB,SAAS;IAClC,uDAAuD;IACvD,MAAM,QAAQ,WAAW,UAAU,YAAY,QAAQ,eAAe,WAAW;IACjF,WAAW,QAAQ,KAAK,MAAM;AAClC;AAEA,MAAM,oBAAoB;IACtB,MAAM,SAAS,SAAS,cAAc;IACtC,MAAM,IAAI,SAAS,cAAc;IACjC,MAAM,MAAM,OAAO,WAAW;IAE9B,uEAAuE;IACvE,6EAA6E;IAC7E,MAAM,aAAa,aAAa,UAAU,MAAM;IAEhD,8DAA8D;IAC9D,OAAO,QAAQ,WAAW;IAC1B,OAAO,SAAS,YAAY;IAE5B,8CAA8C;IAC9C,IAAI,UAAU,YAAY,GAAG,GAAG,OAAO,OAAO,OAAO;IAErD,uDAAuD;IACvD,EAAE,OAAO,OAAO,UAAU,cAAc;IACxC,EAAE,WAAW,IAAI,OAAO,WAAW,yCAAyC;IAC5E,EAAE,SAAS,4CAA4C;AAC3D;AAEA,YAAY,iBAAiB,SAAS;AACtC,UAAU,iBAAiB,UAAU;AACrC,UAAU,iBAAiB,SAAS,IAAM,UAAU","sources":["imageResize/imageResize.js"],"sourcesContent":["const uploadBox = document.querySelector(\".upload-box\"),\r\npreviewImg = uploadBox.querySelector(\"img\"),\r\nfileInput = uploadBox.querySelector(\"input\"),\r\nwidthInput = document.querySelector(\".width input\"),\r\nheightInput = document.querySelector(\".height input\"),\r\nratioInput = document.querySelector(\".ratio input\"),\r\nqualityInput = document.querySelector(\".quality input\"),\r\ndownloadBtn = document.querySelector(\".download-btn\");\r\n\r\nlet ogImageRatio;\r\n\r\nconst loadFile = (e) => {\r\n    const file = e.target.files[0]; // getting first user selected file\r\n    if(!file) return; // return if user hasn't selected any file\r\n    previewImg.src = URL.createObjectURL(file); // passing selected file url to preview img src\r\n    previewImg.addEventListener(\"load\", () => { // once img loaded\r\n        widthInput.value = previewImg.naturalWidth;\r\n        heightInput.value = previewImg.naturalHeight;\r\n        ogImageRatio = previewImg.naturalWidth / previewImg.naturalHeight;\r\n        document.querySelector(\".wrapper\").classList.add(\"active\");\r\n    });\r\n}\r\n\r\nwidthInput.addEventListener(\"keyup\", () => {\r\n    // getting height according to the ratio checkbox status\r\n    const height = ratioInput.checked ? widthInput.value / ogImageRatio : heightInput.value;\r\n    heightInput.value = Math.floor(height);\r\n});\r\n\r\nheightInput.addEventListener(\"keyup\", () => {\r\n    // getting width according to the ratio checkbox status\r\n    const width = ratioInput.checked ? heightInput.value * ogImageRatio : widthInput.value;\r\n    widthInput.value = Math.floor(width);\r\n});\r\n\r\nconst resizeAndDownload = () => {\r\n    const canvas = document.createElement(\"canvas\");\r\n    const a = document.createElement(\"a\");\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    // if quality checkbox is checked, pass 0.5 to imgQuality else pass 1.0\r\n    // 1.0 is 100% quality where 0.5 is 50% of total. you can pass from 0.1 - 1.0\r\n    const imgQuality = qualityInput.checked ? 0.5 : 1.0;\r\n\r\n    // setting canvas height & width according to the input values\r\n    canvas.width = widthInput.value;\r\n    canvas.height = heightInput.value;\r\n\r\n    // drawing user selected image onto the canvas\r\n    ctx.drawImage(previewImg, 0, 0, canvas.width, canvas.height);\r\n    \r\n    // passing canvas data url as href value of <a> element\r\n    a.href = canvas.toDataURL(\"image/jpeg\", imgQuality);\r\n    a.download = new Date().getTime(); // passing current time as download value\r\n    a.click(); // clicking <a> element so the file download\r\n}\r\n\r\ndownloadBtn.addEventListener(\"click\", resizeAndDownload);\r\nfileInput.addEventListener(\"change\", loadFile);\r\nuploadBox.addEventListener(\"click\", () => fileInput.click());"],"names":[],"version":3,"file":"imageResize.dbc988a2.js.map","sourceRoot":"/__parcel_source_root/"}